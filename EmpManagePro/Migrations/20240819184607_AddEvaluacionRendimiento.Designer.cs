// <auto-generated />
using System;
using EmpManagePro.BaseDatos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmpManagePro.Migrations
{
    [DbContext(typeof(EmpleadosDBContext))]
    [Migration("20240819184607_AddEvaluacionRendimiento")]
    partial class AddEvaluacionRendimiento
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmpManagePro.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmpleadoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoID")
                        .IsUnique()
                        .HasFilter("[EmpleadoID] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EmpManagePro.Models.Bonificacion", b =>
                {
                    b.Property<int>("BonificacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BonificacionID"));

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BonificacionID");

                    b.ToTable("Bonificacion");
                });

            modelBuilder.Entity("EmpManagePro.Models.Deduccion", b =>
                {
                    b.Property<int>("DeduccionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeduccionID"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Porcentaje")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DeduccionID");

                    b.ToTable("Deduccion");
                });

            modelBuilder.Entity("EmpManagePro.Models.Empleado", b =>
                {
                    b.Property<string>("EmpleadoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaContratacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PuestoID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmpleadoID");

                    b.HasIndex("PuestoID");

                    b.HasIndex("RoleId");

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("EmpManagePro.Models.EmpleadoBonif", b =>
                {
                    b.Property<string>("EmpleadoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BonificacionID")
                        .HasColumnType("int");

                    b.HasKey("EmpleadoID", "BonificacionID");

                    b.HasIndex("BonificacionID");

                    b.ToTable("EmpleadosBonificaciones");
                });

            modelBuilder.Entity("EmpManagePro.Models.EmpleadoDeduc", b =>
                {
                    b.Property<string>("EmpleadoID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DeduccionID")
                        .HasColumnType("int");

                    b.HasKey("EmpleadoID", "DeduccionID");

                    b.HasIndex("DeduccionID");

                    b.ToTable("EmpleadosDeducciones");
                });

            modelBuilder.Entity("EmpManagePro.Models.EvaluacionRendimiento", b =>
                {
                    b.Property<int>("EvaluacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvaluacionID"));

                    b.Property<string>("EmpleadoID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaReunion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Objetivos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Retroalimentacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seguimiento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EvaluacionID");

                    b.HasIndex("EmpleadoID");

                    b.ToTable("EvaluacionesRendimiento");
                });

            modelBuilder.Entity("EmpManagePro.Models.Puesto", b =>
                {
                    b.Property<int>("PuestoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PuestoID"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salario")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PuestoID");

                    b.ToTable("Puesto");
                });

            modelBuilder.Entity("EmpManagePro.Models.Turno", b =>
                {
                    b.Property<int>("TurnoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TurnoID"));

                    b.Property<int>("CantHoras")
                        .HasColumnType("int");

                    b.Property<string>("DiasSeleccionados")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("HoraEntrada")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraSalida")
                        .HasColumnType("time");

                    b.Property<string>("TipoTurno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TurnoID");

                    b.ToTable("Turnos");
                });

            modelBuilder.Entity("EmpManagePro.Models.TurnoEmpleado", b =>
                {
                    b.Property<int>("TurnoEmpleadoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TurnoEmpleadoID"));

                    b.Property<string>("EmpleadoID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TurnoID")
                        .HasColumnType("int");

                    b.HasKey("TurnoEmpleadoID");

                    b.HasIndex("EmpleadoID");

                    b.HasIndex("TurnoID");

                    b.ToTable("TurnoEmpleados");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EmpManagePro.Models.ApplicationUser", b =>
                {
                    b.HasOne("EmpManagePro.Models.Empleado", "Empleado")
                        .WithOne("User")
                        .HasForeignKey("EmpManagePro.Models.ApplicationUser", "EmpleadoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("EmpManagePro.Models.Empleado", b =>
                {
                    b.HasOne("EmpManagePro.Models.Puesto", "Puesto")
                        .WithMany()
                        .HasForeignKey("PuestoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Puesto");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EmpManagePro.Models.EmpleadoBonif", b =>
                {
                    b.HasOne("EmpManagePro.Models.Bonificacion", "Bonificacion")
                        .WithMany("EmpleadoBonif")
                        .HasForeignKey("BonificacionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmpManagePro.Models.Empleado", "Empleado")
                        .WithMany("EmpleadoBonif")
                        .HasForeignKey("EmpleadoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bonificacion");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("EmpManagePro.Models.EmpleadoDeduc", b =>
                {
                    b.HasOne("EmpManagePro.Models.Deduccion", "Deduccion")
                        .WithMany("EmpleadoDeducciones")
                        .HasForeignKey("DeduccionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmpManagePro.Models.Empleado", "Empleado")
                        .WithMany("EmpleadoDeduc")
                        .HasForeignKey("EmpleadoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deduccion");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("EmpManagePro.Models.EvaluacionRendimiento", b =>
                {
                    b.HasOne("EmpManagePro.Models.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("EmpManagePro.Models.TurnoEmpleado", b =>
                {
                    b.HasOne("EmpManagePro.Models.Empleado", "Empleado")
                        .WithMany("Turnos")
                        .HasForeignKey("EmpleadoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmpManagePro.Models.Turno", "Turno")
                        .WithMany("TurnoEmpleados")
                        .HasForeignKey("TurnoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Turno");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EmpManagePro.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EmpManagePro.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmpManagePro.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EmpManagePro.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmpManagePro.Models.Bonificacion", b =>
                {
                    b.Navigation("EmpleadoBonif");
                });

            modelBuilder.Entity("EmpManagePro.Models.Deduccion", b =>
                {
                    b.Navigation("EmpleadoDeducciones");
                });

            modelBuilder.Entity("EmpManagePro.Models.Empleado", b =>
                {
                    b.Navigation("EmpleadoBonif");

                    b.Navigation("EmpleadoDeduc");

                    b.Navigation("Turnos");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmpManagePro.Models.Turno", b =>
                {
                    b.Navigation("TurnoEmpleados");
                });
#pragma warning restore 612, 618
        }
    }
}
